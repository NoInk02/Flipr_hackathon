{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///home/surya/nextjs/supportFlow/supportflow/lib/auth.ts"],"sourcesContent":["// import { NextAuthOptions } from 'next-auth';\n// import CredentialsProvider from 'next-auth/providers/credentials';\n\n// declare module \"next-auth\" {\n//   interface User {\n//     accessToken?: string;\n//     type?: string;\n//   }\n//   interface Session {\n//     accessToken?: string;\n//     user?: {\n//       type?: string;\n//       name?: string;\n//     };\n//   }\n// }\n\n// export const authOptions: NextAuthOptions = {\n//   providers: [\n//     CredentialsProvider({\n//       name: 'Credentials',\n//       credentials: {\n//         username: { label: 'Username', type: 'text' },\n//         password: { label: 'Password', type: 'password' },\n//         type: { label: 'Type', type: 'text' }, // To differentiate login/register\n//       },\n//       async authorize(credentials) {\n//         if (!credentials?.username || !credentials?.password) {\n//           throw new Error('Please enter both username and password');\n//         }\n\n//         if (credentials.type === 'login') {\n//           try {\n//             const res = await fetch('http://localhost:8000/admin/login', {\n//               method: 'POST',\n//               headers: { 'Content-Type': 'application/json' },\n//               body: JSON.stringify({\n//                 username: credentials.username,\n//                 password: credentials.password\n//               }),\n//             });\n\n//             if (!res.ok) {\n//               const error = await res.text();\n//               console.error('Login failed:', error);\n//               throw new Error('Invalid credentials');\n//             }\n\n//             const data = await res.json();\n//             if (!data.access_token) {\n//               throw new Error('Invalid response from server');\n//             }\n\n//             return {\n//               id: credentials.username,\n//               name: credentials.username,\n//               accessToken: data.access_token,\n//               type: data.type || 'Admin', \n//             };\n//           } catch (error) {\n//             console.error('Login error:', error);\n//             throw error;\n//           }\n//         }\n\n//         throw new Error('Invalid login type');\n//       },\n//     }),\n//   ],\n//   callbacks: {\n//     async jwt({ token, user }) {\n//       if (user) {\n//         token.accessToken = user.accessToken;\n//         token.type = user.type;\n//       }\n//       return token;\n//     },\n//     async session({ session, token }) {\n//       session.accessToken = token.accessToken as string;\n//       if (session.user) {\n//         session.user.name = token.name as string;\n//         session.user.type = token.type as string;\n//       }\n//       return session;\n//     },\n//   },\n//   pages: {\n//     signIn: '/signin',\n//     error: '/signin', // Add error page\n//   },\n//   debug: process.env.NODE_ENV === 'development', // Enable debug messages in development\n// };\n\nimport { NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\ndeclare module 'next-auth' {\n  interface User {\n    id: string;\n    name?: string | null;\n    accessToken?: string;\n    type?: string;\n    company_id?: string;\n  }\n\n  interface Session {\n    user: {\n      name?: string | null;\n      type?: string;\n      company_id?: string;\n    };\n    accessToken?: string;\n  }\n}\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        username: { label: 'Username', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n        type: { label: 'Type', type: 'text' }, // 'Admin', 'Client', 'Agent'\n        company_id: { label: 'Company ID', type: 'text' }, // Required for Client/Agent\n      },\n      async authorize(credentials) {\n        if (!credentials?.username || !credentials?.password || !credentials?.type) {\n          throw new Error('Please enter all required fields');\n        }\n\n        let url = '';\n        const role = credentials.type;\n\n        if (role === 'Admin') {\n          url = 'http://localhost:8000/admin/login';\n        } else if (role === 'client' || role === 'helper') {\n          if (!credentials.company_id) {\n            throw new Error('Company ID is required for Client or Agent login');\n          }\n          url =\n            role === 'client'\n              ? `http://localhost:8000/${credentials.company_id}/clients/login`\n              : `http://localhost:8000/${credentials.company_id}/helpers/login`;\n        } else {\n          throw new Error('Invalid role type');\n        }\n\n        try {\n          const res = await fetch(url, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(\n              role === 'client' \n                ? {\n                    clientID: credentials.username,\n                    password: credentials.password,\n                  }\n                : role === 'helper'\n                ? {\n                    helperID: credentials.username,\n                    password: credentials.password,\n                  }\n                : {\n                    username: credentials.username,\n                    password: credentials.password,\n                  }\n            ),\n          });\n\n          if (!res.ok) {\n            const error = await res.text();\n            console.error('Login failed:', error);\n            throw new Error('Invalid credentials');\n          }\n\n          const data = await res.json();\n          if (!data.access_token) {\n            throw new Error('Invalid response from server');\n          }\n\n          return {\n            id: credentials.username,\n            name: credentials.username,\n            accessToken: data.access_token,\n            type: role === 'Admin' ? 'Admin' : data.type || role, // Map \"helper\" to \"Agent\" in frontend\n            company_id: role !== 'Admin' ? credentials.company_id : undefined,\n          };\n        } catch (error) {\n          console.error('Login error:', error);\n          throw error;\n        }\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.accessToken = user.accessToken;\n        token.type = user.type;\n        token.company_id = user.company_id;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.accessToken = token.accessToken as string;\n      if (session.user) {\n        session.user.name = token.name as string;\n        session.user.type = token.type as string;\n        session.user.company_id = token.company_id as string | undefined;\n      }\n      return session;\n    },\n  },\n  pages: {\n    signIn: '/signin',\n    error: '/signin',\n  },\n  debug: process.env.NODE_ENV === 'development',\n};\n\nexport function clearAuthData() {\n  // Clear localStorage\n  localStorage.clear();\n  \n  // Clear sessionStorage\n  sessionStorage.clear();\n  \n  // Clear cookies\n  document.cookie.split(\";\").forEach(function(c) { \n    document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); \n  });\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 339, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///home/surya/nextjs/supportFlow/supportflow/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport { authOptions } from '@/lib/auth';\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,6GAAA,CAAA,cAAW"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}