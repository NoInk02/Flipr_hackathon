{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///home/surya/nextjs/supportFlow/supportflow/app/company/%5Bcompanyid%5D/clientregister/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { useRouter, useParams } from 'next/navigation';\nimport {\n  Button,\n  TextField,\n  Box,\n  Typography,\n  Container,\n  Link as MuiLink,\n  Alert,\n  Card,\n  CardContent,\n  CircularProgress,\n} from '@mui/material';\nimport Link from 'next/link';\nimport toast from 'react-hot-toast';\n\nexport default function ClientRegister() {\n  const [name, setName] = useState('');\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const router = useRouter();\n  const params = useParams();\n  const companyid = params.companyid as string;\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    // Client-side validations\n    if (name.length < 2) {\n      setError('Name must be at least 2 characters long');\n      setIsLoading(false);\n      return;\n    }\n    if (username.length < 3) {\n      setError('Client ID must be at least 3 characters long');\n      setIsLoading(false);\n      return;\n    }\n    if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {\n      setError('Please enter a valid email address');\n      setIsLoading(false);\n      return;\n    }\n    if (password.length < 6) {\n      setError('Password must be at least 6 characters long');\n      setIsLoading(false);\n      return;\n    }\n    if (password !== confirmPassword) {\n      setError('Passwords do not match');\n      setIsLoading(false);\n      return;\n    }\n\n    // Server-side validation\n    try {\n      const response = await fetch(`http://localhost:8000/${companyid}/clients/register`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ \n          clientID: username,\n          password: password,\n          ticketIDs: []\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        const errorMessage = typeof errorData.detail === 'string' \n          ? errorData.detail \n          : 'Registration failed on the server.';\n        setError(errorMessage);\n        toast.error(errorMessage);\n        setIsLoading(false);\n        return;\n      }\n\n      toast.success('Successfully registered! Please sign in.');\n      router.push(`/company/${companyid}/clientlogin`);\n    } catch (err) {\n      console.error('Registration error:', err);\n      setError('An unexpected error occurred');\n      toast.error('An unexpected error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      sx={{\n        minHeight: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        background: 'linear-gradient(135deg, #e6f0ff 0%, #f0f4ff 100%)',\n        position: 'relative',\n        overflow: 'hidden',\n        '&:before': {\n          content: '\"\"',\n          position: 'absolute',\n          top: '-50%',\n          left: '-50%',\n          width: '200%',\n          height: '200%',\n          background: 'radial-gradient(circle, rgba(0, 82, 204, 0.1) 10%, transparent 40%)',\n          transform: 'rotate(30deg)',\n        },\n      }}\n    >\n      <Container maxWidth=\"sm\">\n        <Card\n          sx={{\n            boxShadow: '0 8px 24px rgba(0, 0, 0, 0.15)',\n            borderRadius: 3,\n            overflow: 'hidden',\n            bgcolor: 'background.paper',\n            maxWidth: 400,\n            mx: 'auto',\n            mt: { xs: 4, sm: 0 },\n            position: 'relative',\n            zIndex: 1,\n          }}\n        >\n          <CardContent sx={{ p: 4 }}>\n            <Typography\n              component=\"h1\"\n              variant=\"h5\"\n              sx={{ textAlign: 'center', mb: 3, fontWeight: 600, color: 'primary.main' }}\n            >\n              Client Register\n            </Typography>\n            {error && (\n              <Alert severity=\"error\" sx={{ mb: 3 }}>\n                {error}\n              </Alert>\n            )}\n            <Box component=\"form\" onSubmit={handleSubmit}>\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                name=\"name\"\n                autoComplete=\"name\"\n                autoFocus\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                sx={{ mb: 2 }}\n                disabled={isLoading}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Client ID\"\n                name=\"username\"\n                autoComplete=\"username\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                sx={{ mb: 2 }}\n                disabled={isLoading}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                sx={{ mb: 2 }}\n                disabled={isLoading}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"new-password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                sx={{ mb: 2 }}\n                disabled={isLoading}\n              />\n              <TextField\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"confirm-password\"\n                label=\"Confirm Password\"\n                type=\"password\"\n                id=\"confirm-password\"\n                autoComplete=\"new-password\"\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                sx={{ mb: 3 }}\n                disabled={isLoading}\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                sx={{\n                  py: 1.5,\n                  borderRadius: 2,\n                  background: 'linear-gradient(45deg, #0052cc 30%, #4d8cff 90%)',\n                  '&:hover': { boxShadow: '0 4px 12px rgba(0, 82, 204, 0.3)' },\n                }}\n                disabled={isLoading}\n              >\n                {isLoading ? (\n                  <CircularProgress size={24} sx={{ color: 'white', position: 'absolute' }} />\n                ) : (\n                  'Register'\n                )}\n              </Button>\n              <Box sx={{ textAlign: 'center', mt: 2 }}>\n                <MuiLink\n                  component={Link}\n                  href={`/company/${companyid}/clientlogin`}\n                  variant=\"body2\"\n                  sx={{ color: 'secondary.main' }}\n                >\n                  {'Already have an account? Sign In'}\n                </MuiLink>\n              </Box>\n            </Box>\n          </CardContent>\n        </Card>\n      </Container>\n    </Box>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}